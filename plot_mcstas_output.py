# Plot graphs of output datafiles generated by a McStas simulation
# Copyright(C) 2020 Celine Durniak
#
# This program is free software: you can redistribute it and / or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program. If not, see < https://www.gnu.org / licenses/>.

from mcstasscript.interface import instr
from mcstasscript.interface import plotter
from mcstasscript.interface import functions
from mcstasscript.interface import reader

import numpy as np
import matplotlib.pyplot as plt


# path to load McStas simulation data
path_to_model = "/Users/celinedurniak/Documents/WorkESS/V20/V20Diffraction_ROOT_ASC_McStas/"

# read instrument file
InstrReader = reader.McStas_file(path_to_model + "/V20_config6/V20_config6.instr")

# check McStas instrument file for the type of sample
McStasInstrument = instr.McStas_instr("McStasInstrument")
InstrReader.add_to_instr(McStasInstrument)
McStasInstrument.print_components()

McStasInstrument.print_component('NAK')

# access data stored after McStas simulations
data_to_plot = functions.load_data(path_to_model+'/V20_config6/')

# Create a dictionary containing filenames, shape of output data and x, y labels
dict_mcstas_files = {}

for item in data_to_plot:
    file_key = item.metadata.info['filename'].rstrip()
    xlabel = item.metadata.info['xlabel'].rstrip()
    ylabel = item.metadata.info['ylabel'].rstrip()
    type_array = item.metadata.info['type']
    start = type_array.find('(') + 1
    end = type_array.find(')', start)

    if ',' in type_array[start:end]:
        nx_value, ny_value = type_array[start:end].split(',')

        dict_mcstas_files[file_key] = ((int(nx_value),
                                        int(ny_value)),
                                       xlabel,
                                       ylabel)
    else:
        dict_mcstas_files[file_key] = (int(type_array[start:end]),
                                       xlabel,
                                       ylabel)

# plot all datafiles on a single page
# plotter.make_sub_plot(data_to_plot)
for item in data_to_plot:
    plotter.make_sub_plot(item)

# plot selected datafiles with matplotlib
# Folder containing output of McStas simulation
result_folder = 'V20_config6'

# plot 1D data generated by McStas simulation and plot using matplotlib
selected_filename = 'monitor_Hetube6.dat'
# quick check that we have 1D or 2D data
print(dict_mcstas_files[selected_filename])

fig, ax = plt.subplots()

x, y = np.genfromtxt(path_to_model + result_folder + "/" + selected_filename,
                     usecols=(0, 1), unpack=True)
ax.plot(x, y, label=selected_filename)
ax.set_xlabel(dict_mcstas_files[selected_filename][1])
ax.set_ylabel(dict_mcstas_files[selected_filename][2])
ax.legend()
plt.show()

# plot 2D - the number of line to read is hard-coded but could be accessed from the header of
# the file: '# type: array_2d(150, 150)'
selected_filename = 'monitor_tx_DENEX.dat'

print(dict_mcstas_files[selected_filename])

# check that we are dealing with 2D data and set the limit to read the first matrix only

data2d = np.genfromtxt(path_to_model + result_folder + '/' + selected_filename,
                       max_rows=dict_mcstas_files[selected_filename][0][0])

fig, ax = plt.subplots()

contf = ax.imshow(np.flip(data2d, 0), aspect='auto')

ax.set_xlabel(dict_mcstas_files[selected_filename][1])

ax.set_ylabel(dict_mcstas_files[selected_filename][2])

ax.set_title(selected_filename)

cbar = fig.colorbar(contf)
plt.show()
